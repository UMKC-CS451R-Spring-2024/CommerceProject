@using BlazorBootstrap
@using Color = System.Drawing.Color

<LineChart @ref="lineChart" Width="400"  Class="mb-4" />

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    public List<string> GetXAxisLabels()
    {
        List<string> labels = new List<string>();

        for(int i = 15; i >= 0; i--)
        {
            //Remove the date from the timestamp
            string timestampWithNoDate = StockDataList[i].Timestamp.Substring(StockDataList[i].Timestamp.IndexOf(" ") + 1);
            labels.Add(timestampWithNoDate);
        }

        return labels;
    }

    public List<double> GetYAxisLabels()
    {
        List<double> labels = new List<double>();

        for (int i = 15; i >= 0; i--)
        {
            labels.Add(StockDataList[i].Open);
        }


        return labels;
    }

    protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = GetXAxisLabels();
        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset()
            {
                Label = "Opening Stock Price By The Hour",
                Data = GetYAxisLabels(),
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset1);



        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X.Title.Text = "03-06-24";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y.Title.Text = "Stock Price USD";
        lineChartOptions.Scales.Y.Title.Display = true;
        lineChartOptions.Scales.Y.Max = 200;
        lineChartOptions.Scales.Y.Min = 150;

        lineChartOptions.Plugins.Title.Text = "Stock price for Amazon";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    [Parameter]
    public List<StockData> StockDataList {get; set;}
}
