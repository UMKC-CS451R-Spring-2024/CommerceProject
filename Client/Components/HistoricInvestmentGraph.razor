@*<h3>HistoricInvestmentGraph</h3>*@

@using BlazorBootstrap
@using Color = System.Drawing.Color
@using System.ComponentModel.DataAnnotations
@using Commerce.WebAPI.Repositories
@using System.Net.Http.Json

@inject HttpClient httpClient

<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="initialInvestment" class="form-label">Initial Investment ($):</label>
        <InputNumber @bind-Value="initialInvestment" class="form-control" id="initialInvestment" />
    </div>

    <div class="mb-3">
        <label for="stockTicker" class="form-label">Stock Ticker:</label>
        <InputText @bind-Value="stockTicker" class="form-control" id="stockTicker" />
    </div>

    <button type="submit" class="btn btn-primary">Update Chart</button>
</EditForm>

<LineChart @ref="lineChart" Width="800" Class="mb-4" />

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private string apiBaseUrl = "https://localhost:7283";

    [Required]
    [StringLength(10, ErrorMessage = "Ticker symbol is too long.")]
    private string stockTicker = ""; // Variable to hold the stock ticker

    [Required]
    [Range(0, double.MaxValue, ErrorMessage = "Please enter a valid amount.")]
    public double initialInvestment { get; set; } = 1000;

    private Dictionary<int, double> AnnualReturns; // Dictionary of years/returns for the called investment

    // Initialization before user chooses a graph
    protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;
        const double interestRate = 2.0; // 2% annual interest rate

        var labels = Enumerable.Range(DateTime.Now.Year, 20).Select(year => year.ToString()).ToList(); // Years from now to 20 years later

        double cumulativeAmount = initialInvestment;
        var dataValues = new List<double>();

        // Simulate each year's growth at a fixed interest rate
        for (int i = 0; i < 20; i++)
        {
            cumulativeAmount *= (1 + interestRate / 100);
            dataValues.Add(cumulativeAmount);
        }

        var dataset = new LineChartDataset()
            {
                Label = "Savings Account Growth",
                Data = dataValues,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        lineChartOptions = new LineChartOptions();
        {
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X!.Title!.Text = "Year";
            lineChartOptions.Scales.X!.Title!.Display = true;

            lineChartOptions.Scales.Y!.Title!.Text = "Cumulative Amount ($)";
            lineChartOptions.Scales.Y!.Title!.Display = true;

            lineChartOptions.Plugins.Title!.Text = "Savings Account Growth Over 20 Years at 2% Interest";
            lineChartOptions.Plugins.Title.Display = true;

        };
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task HandleValidSubmit()
    {
        await FetchAndDisplayAnnualReturns(stockTicker);
    }


    private async Task UpdateChart()
    {
        await UpdateChartAsync();
    }


    private async Task UpdateChartAsync()
    {
        var labels = AnnualReturns.Keys.OrderBy(year => year).Select(year => year.ToString()).ToList();

        double cumulativeAmount = initialInvestment;
        var dataValues = new List<double>();

        foreach (var year in labels)
        {
            int yr = int.Parse(year);
            cumulativeAmount *= (1 + AnnualReturns[yr] / 100);
            dataValues.Add(cumulativeAmount);
        }

        chartData.Datasets = new List<IChartDataset>
    {
        new LineChartDataset()
        {
            Label = stockTicker + " Annual Returns",
            Data = dataValues,
            BackgroundColor = new List<string> { "rgba(0, 123, 255, 0.5)" },
            BorderColor = new List<string> { "rgba(0, 123, 255, 1)" },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { "rgba(0, 123, 255, 0.5)" },
            PointRadius = new List<int> { 3 },
            PointHoverRadius = new List<int> { 5 },
        }
    };

        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the chart with the API to get data
            await FetchAndDisplayAnnualReturns(stockTicker);
        }
    }

    private async Task FetchAndDisplayAnnualReturns(string symbol)
    {
        try
        {
            var response = await httpClient.GetAsync($"{apiBaseUrl}/api/Stock/GetTimeSeriesMonthlyAdjusted/{symbol}");
            if (response.IsSuccessStatusCode)
            {
                var annualReturnsResponse = await response.Content.ReadFromJsonAsync<Dictionary<int, double>>();
                if (annualReturnsResponse != null)
                {
                    AnnualReturns = annualReturnsResponse;
                    InitializeChartWithData(); // Initialize or update the chart with new data
                    await lineChart.UpdateAsync(chartData, lineChartOptions); // Update the chart with new data
                }
            }
            else
            {
                // Handle the error response here
                Console.WriteLine("Error fetching data: " + response.StatusCode);
            }
        }
        catch (HttpRequestException e)
        {
            // Handle exceptions or log the error
            Console.WriteLine("Exception caught: " + e.Message);
        }
    }

    private void InitializeChartWithData()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        // Update labels based on the fetched dictionary
        var labels = AnnualReturns.Keys.OrderBy(year => year).Select(year => year.ToString()).ToList();

        double cumulativeAmount = initialInvestment;
        var dataValues = new List<double>();

        // You might need to adjust this logic depending on how you want to calculate cumulative returns
        foreach (var year in labels)
        {
            int yr = int.Parse(year);
            cumulativeAmount *= (1 + AnnualReturns[yr] / 100);
            dataValues.Add(cumulativeAmount);
        }

        var dataset = new LineChartDataset()
            {
                Label = stockTicker + " Annual Returns",
                Data = dataValues,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 1 },
                PointHoverRadius = new List<int> { 4 },
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        lineChartOptions = new LineChartOptions();
        {
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X!.Title!.Text = "Year";
            lineChartOptions.Scales.X!.Title!.Display = true;

            lineChartOptions.Scales.Y!.Title!.Text = "Cumulative Amount ($)";
            lineChartOptions.Scales.Y!.Title!.Display = true;

            lineChartOptions.Plugins.Title!.Text = stockTicker + " Annual Investment Return";
            lineChartOptions.Plugins.Title.Display = true;

        };
    }
}