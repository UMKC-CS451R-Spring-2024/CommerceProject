@*<h3>HistoricInvestmentGraph</h3>*@

@using BlazorBootstrap
@using Color = System.Drawing.Color
@using System.ComponentModel.DataAnnotations

<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="initialInvestment" class="form-label">Initial Investment ($):</label>
        <InputNumber @bind-Value="initialInvestment" class="form-control" id="initialInvestment" />
    </div>

    <button type="submit" class="btn btn-primary">Update Chart</button>
</EditForm>

<LineChart @ref="lineChart" Width="800" Class="mb-4" />

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private Dictionary<int, double> AnnualReturns = new Dictionary<int, double>
    {
        { 2020, 37.03 },
        { 2021, 44.03 },
        { 2022, 34.03 },
        { 2023, 4.03 }
    };
    [Required]
    [Range(0, double.MaxValue, ErrorMessage = "Please enter a valid amount.")]
    public double initialInvestment { get; set; } = 1000;


    protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        // Update labels based on dictionary
        var labels = AnnualReturns.Keys.OrderBy(year => year).Select(year => year.ToString()).ToList();

        double cumulativeAmount = initialInvestment;
        var dataValues = new List<double>();

        foreach (var year in labels)
        {
            int yr = int.Parse(year);
            cumulativeAmount *= (1 + AnnualReturns[yr] / 100);
            dataValues.Add(cumulativeAmount);
        }

        var dataset = new LineChartDataset()
            {
                Label = "IBM Annual Returns",
                Data = dataValues,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        lineChartOptions = new LineChartOptions();
        {
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X!.Title!.Text = "Year";
            lineChartOptions.Scales.X!.Title!.Display = true;

            lineChartOptions.Scales.Y!.Title!.Text = "Cumulative Return ($)";
            lineChartOptions.Scales.Y!.Title!.Display = true;

            lineChartOptions.Plugins.Title!.Text = "Annual Investment Returns";
            lineChartOptions.Plugins.Title.Display = true;

        };
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task HandleValidSubmit()
    {
        await UpdateChartAsync();
    }


    private async Task UpdateChart()
    {
        await UpdateChartAsync();
    }


    private async Task UpdateChartAsync()
    {
        var labels = AnnualReturns.Keys.OrderBy(year => year).Select(year => year.ToString()).ToList();

        double cumulativeAmount = initialInvestment;
        var dataValues = new List<double>();

        foreach (var year in labels)
        {
            int yr = int.Parse(year);
            cumulativeAmount *= (1 + AnnualReturns[yr] / 100);
            dataValues.Add(cumulativeAmount);
        }

        chartData.Datasets = new List<IChartDataset>
    {
        new LineChartDataset()
        {
            Label = "IBM Annual Returns",
            Data = dataValues,
            BackgroundColor = new List<string> { "rgba(0, 123, 255, 0.5)" },
            BorderColor = new List<string> { "rgba(0, 123, 255, 1)" },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { "rgba(0, 123, 255, 0.5)" },
            PointRadius = new List<int> { 3 },
            PointHoverRadius = new List<int> { 5 },
        }
    };

        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

}