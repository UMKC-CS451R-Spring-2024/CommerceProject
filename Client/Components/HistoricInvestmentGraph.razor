
@using BlazorBootstrap
@using Client.Repositories.Stock
@using Color = System.Drawing.Color
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Newtonsoft.Json
@using System

@inject IStockRepository stockRepository

<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="d-flex align-items-center mb-3">
            <div class="flex-grow-1 me-2">
                <label for="initialInvestment" class="form-label">Initial Investment ($):</label>
                <InputNumber @bind-Value="initialInvestment" class="form-control" id="initialInvestment" min="0.01" />
            </div>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Size="Size.Large">Update Investment Amount</Button>
        </div>
    </div>
    <div>
        <LineChart @ref="lineChart" Width="800" Height="600" Class="mb-4 unique-line-chart-width" />
    </div>
</EditForm>

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private List<string>? labels;
    private List<double> dataValues { get; set; } = new List<double>();

    [Parameter]
    public string StockTicker { get; set; } // Default stock ticker to change

    [Required(ErrorMessage = "Initial investment is required")]
    [Range(0.01, double.MaxValue, ErrorMessage = "Initial investment must be greater than $0.")]
    public double initialInvestment { get; set; } = 10000; // Default initial investment value

    protected override async Task OnInitializedAsync()
    {
        var stockData = await stockRepository.GetAnnualReturns(StockTicker);
        InitializeChartData(stockData.AnnualReturns, StockTicker);
    }

    private void InitializeChartData(Dictionary<int, double> annualReturns, string symbol)
    {
        // Console.WriteLine($"Symbol: {symbol}");
        // foreach (var ar in annualReturns)
        // {
        //     Console.WriteLine(ar);
        // }
        var colors = ColorBuilder.CategoricalTwelveColors;
        var calculatedReturns = CalculateReturns(initialInvestment, annualReturns);
        // Console.WriteLine($"CalculatedReturns");
        // foreach (var cr in calculatedReturns)
        // {
        //     Console.WriteLine(cr);
        // }
        labels = calculatedReturns.Keys.OrderBy(year => year).Select(year => year.ToString()).ToList();
        // Console.WriteLine($"labels");
        // foreach (var label in labels)
        // {
        //     Console.WriteLine(label);
        // }

        dataValues = calculatedReturns.Values.ToList();
        // Console.WriteLine($"dataValues");
        // foreach (var dv in dataValues)
        // {
        //     Console.WriteLine(dv);
        // }

        var dataset = new LineChartDataset()
            {
                Label = "Investment Growth",
                Data = dataValues,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 3 },
                PointHoverRadius = new List<int> { 5 },
                Fill = false
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        lineChartOptions = new();
        {
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X.Title.Text = "Year";
            lineChartOptions.Scales.X.Title.Display = true;

            lineChartOptions.Scales.Y.Title.Text = "Cumulative Amount ($)";
            lineChartOptions.Scales.Y.Title.Display = true;

            lineChartOptions.Plugins.Title.Text = $"Growth of ${initialInvestment}";
            lineChartOptions.Plugins.Title.Display = true;
        };
    }

    private Dictionary<int, double> CalculateReturns(double initialInvestment, Dictionary<int, double> annualReturns)
    {
        var calculatedReturns = new Dictionary<int, double>();
        double currentAmount = initialInvestment;

        foreach (var year in annualReturns.Keys.OrderBy(y => y))
        {
            currentAmount *= 1 + annualReturns[year] / 100;
            calculatedReturns.Add(year, currentAmount);
        }

        return calculatedReturns;
    }

    private async Task HandleValidSubmit()
    {
        if (initialInvestment > 0)
        {
            await UpdateChartDataAsync();
        }
    }

    private async Task UpdateChartDataAsync()
    {
        // Since this method is meant to update chart data, let's fetch the latest returns
        var stockData = await stockRepository.GetAnnualReturns(StockTicker);
        var calculatedReturns = CalculateReturns(initialInvestment, stockData.AnnualReturns);
        dataValues = calculatedReturns.Values.ToList();

        // Update the chart with the new data
        if (chartData.Datasets.FirstOrDefault() is LineChartDataset lineChartDataset)
        {
            lineChartDataset.Data = dataValues;
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
        else
        {
            throw new InvalidOperationException("Dataset is not of the expected type.");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (chartData == null)
                Console.WriteLine("ChartData null firstRender");
            else Console.WriteLine("ChartData not null firstRender");
            if (lineChartOptions == null)
                Console.WriteLine("lineChartOptions null firstRender");
            else Console.WriteLine("lineChartOptions not null firstRender");
            await lineChart.InitializeAsync(chartData, lineChartOptions);
            await Task.Delay(100);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

    @*
    private async Task UpdateChartDataAsync()
    {
        // Retrieve the mock annual returns for the chart update
        var mockReturns = GetMockAnnualReturns();
        var calculatedReturns = CalculateReturns(initialInvestment, mockReturns);
        dataValues = calculatedReturns.Values.ToList();

        if (chartData.Datasets.First() is LineChartDataset lineChartDataset)
        {
            lineChartDataset.Data = dataValues;
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
        else
        {
            throw new InvalidOperationException("Dataset is not of the expected type.");
        }
    }

        protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;
        var mockReturns = GetMockAnnualReturns();
        var calculatedReturns = CalculateReturns(initialInvestment, mockReturns);
        labels = calculatedReturns.Keys.OrderBy(year => year).Select(year => year.ToString()).ToList();
        dataValues = calculatedReturns.Values.ToList();

        var dataset = new LineChartDataset()
            {
                Label = "Investment Growth",
                Data = dataValues,
                BackgroundColor = new List<string> { colors[0] }, // Dark green
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 3 },
                PointHoverRadius = new List<int> { 5 },
                Fill = false
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        lineChartOptions = new LineChartOptions();
        {
            lineChartOptions.Responsive = true;
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

            lineChartOptions.Scales.X!.Title!.Text = "Year";
            lineChartOptions.Scales.X!.Title!.Display = true;

            lineChartOptions.Scales.Y!.Title!.Text = "Cumulative Amount ($)";
            lineChartOptions.Scales.Y!.Title!.Display = true;

            lineChartOptions.Plugins.Title!.Text = $"Growth of ${initialInvestment}";
            lineChartOptions.Plugins.Title.Display = true;
        };
    }
    *@

