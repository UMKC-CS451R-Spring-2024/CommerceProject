@using BlazorBootstrap
@using Color = System.Drawing.Color

<LineChart @ref="lineChart" Width="800"  Class="mb-4" />

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;


    public List<string> GetXAxisLabels()

    {
        List<string> labels = new List<string>();

        int currentYear = DateTime.Now.Year;
        currentYear--;

        DateTime now = DateTime.Now;
        for(int i = 0; i < 12; i++)
        {
            if(now.ToString("MMMM") == "January" && (i != 0))
            {
                currentYear++;
            }

            labels.Add(now.ToString("MMMM") + " " + currentYear);
            now = now.AddMonths(1);
        }

        return labels;
    }


    public List<double> GetYAxisLabels()
    {
        List<double> labels = new List<double>();

        int currentMonth = DateTime.Now.Month;
        for(int i = 0; i < 12; i++)
        {
            if(currentMonth == 12)
            {
                currentMonth = 0;
            }
            labels.Add(AccountInfo.PastYearInvestments[currentMonth]);
            currentMonth++;
        }

        return labels;
    }


    protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = getXAxisLabels();
        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset()
            {
                Label = "All Accounts Combined",
                Data =  GetYAxisLabels() ,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset1);


        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X.Title.Text = "Month and Year";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y.Title.Text = "Amount in $";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Investments Over the Past Year";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    [Parameter]
    public AccountInformation AccountInfo { get; set; } 

}
