@using BlazorBootstrap
@using Color = System.Drawing.Color

<LineChart @ref="lineChart" Width="800" Class="mb-4"/>

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    [Parameter]
    public List<double> ActualData { get; set; }

    [Parameter]
    public List<double> NeededData { get; set; }

    [Parameter]
    public int Age { get; set; }
    
    [Parameter]
    public int LifeExpectancy { get; set; }

    protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = (from number in Enumerable.Range(Age, LifeExpectancy) select number.ToString()).ToList();
        var datasets = new List<IChartDataset>();

        var actualDataset = new LineChartDataset
                       {
                           Label = "Actual Savings",
                           Data = ActualData,
                           BackgroundColor = new List<string> { colors[0] },
                           BorderColor = new List<string> { colors[0] },
                           BorderWidth = new List<double> { 2 },
                           HoverBorderWidth = new List<double> { 4 },
                           PointBackgroundColor = new List<string> { colors[0] },
                           PointRadius = new List<int> { 0 }, // hide points
                           PointHoverRadius = new List<int> { 4 }
                       };
        datasets.Add(actualDataset);

	var neededDataset = new LineChartDataset
                       {
                           Label = "Needed Savings",
                           Data = NeededData,
                           BackgroundColor = new List<string> { colors[1] },
                           BorderColor = new List<string> { colors[1] },
                           BorderWidth = new List<double> { 2 },
                           HoverBorderWidth = new List<double> { 4 },
                           PointBackgroundColor = new List<string> { colors[1] },
                           PointRadius = new List<int> { 0 }, // hide points
                           PointHoverRadius = new List<int> { 4 }
                       };
        datasets.Add(neededDataset);

        chartData = new ChartData
                    {
                        Labels = labels,
                        Datasets = datasets
                    };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title!.Text = "Age";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y!.Title!.Text = "Savings ($)";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title!.Text = "Retirement Savings";
        lineChartOptions.Plugins.Title.Display = true;
}

    private async Task UpdateDatasets() {
	var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = (from number in Enumerable.Range(Age, LifeExpectancy) select number.ToString()).ToList();
	var datasets = new List<IChartDataset>();

        var actualDataset = new LineChartDataset
                       {
                           Label = "Actual Savings",
                           Data = ActualData,
                           BackgroundColor = new List<string> { colors[0] },
                           BorderColor = new List<string> { colors[0] },
                           BorderWidth = new List<double> { 2 },
                           HoverBorderWidth = new List<double> { 4 },
                           PointBackgroundColor = new List<string> { colors[0] },
                           PointRadius = new List<int> { 0 }, // hide points
                           PointHoverRadius = new List<int> { 4 }
                       };
        datasets.Add(actualDataset);

	var neededDataset = new LineChartDataset
                       {
                           Label = "Needed Savings",
                           Data = NeededData,
                           BackgroundColor = new List<string> { colors[1] },
                           BorderColor = new List<string> { colors[1] },
                           BorderWidth = new List<double> { 2 },
                           HoverBorderWidth = new List<double> { 4 },
                           PointBackgroundColor = new List<string> { colors[1] },
                           PointRadius = new List<int> { 0 }, // hide points
                           PointHoverRadius = new List<int> { 4 }
                       };
        datasets.Add(neededDataset);

	chartData.Datasets = datasets;
	await InvokeAsync(StateHasChanged);
}

    protected override async Task OnParametersSetAsync() {
	await UpdateDatasets();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}
