@page "/dashboard"

@inject HttpClient Http
@inject NavigationManager navigationManager;
@using CsvHelper;
@using System.Globalization;
@using Newtonsoft.Json;
@using System.Net.Mail;
@using System.Text;


<PageTitle>Dashboard</PageTitle>



@if(userAccounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="jumbotron">
        <h1 class="display-4">Hello, @userAccounts[0].AccountName</h1>
        <hr class="my-4">
        <h1> <span class="badge bg-secondary">Total Investments: $@GetTotalInvestedAmount(userAccounts[0]).ToString("N0")</span></h1>
        <br />

        <h2>Accounts:</h2>
        <div class="account-table-and-graph">
            <table class="account-table table table-borderless">
                <tbody class="account-table">
                    @foreach(Accounts account in userAccounts[0].Accounts)
                    {
                        <tr>
                            <th style="background-color: rgb(240,240,240);" scope="row"></th>
                            <td style="background-color: rgb(240,240,240);">@account.AccountType <br />@CensorAccountNoDigits(account.AccountNumber)</td>
                            <td style="background-color: rgb(240,240,240);">$@account.AccountAmount.ToString("N0")</td>
                        </tr>
                        
                    }
                    
                </tbody>
            </table>

            <div class="d-flex" style="height: 250px;">
                <div class="vr"></div>
            </div>

            <Client.Components.PastYearInvestmentsGraph AccountInfo="userAccounts[0]" />

        </div>



        <div class="accounts-button">
            <button type="button" class="btn btn-primary" @onclick='() => NavigateToAccountAndActivityPage(userAccounts[0].AccountName, false)'>View Accounts</button>
        </div>

    </div> <!--jumbtron class-->

    <br />
    <br />

    <div class="bottom-half-cards">

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Account Activity</h5>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Date</th>
                            <th scope="col">Account</th>
                            <th scope="col">Type</th>
                            <th scope="col">Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">1/12/24</th>
                            <td>Roth IRA</td>
                            <td>Program Fee</td>
                            <td>-$25.00</td>
                        </tr>
                        <tr>
                            <th scope="row">1/31/24</th>
                            <td>Roth IRA</td>
                            <td>Monthly Contribution</td>
                            <td>$500.00</td>
                        </tr>
                        <tr>
                            <th scope="row">1/31/24</th>
                            <td>Brockerage</td>
                            <td>Monthly Contribution</td>
                            <td>$250.00</td>
                        </tr>
                        <tr>
                            <th scope="row">2/13/24</th>
                            <td>Roth IRA</td>
                            <td>Program Fee</td>
                            <td>-$25.00</td>
                        </tr>
                        <tr>
                            <th scope="row">2/29/24</th>
                            <td>Roth IRA</td>
                            <td>Monthly Contribution</td>
                            <td>$500.00</td>
                        </tr>
                        <tr>
                            <th scope="row">2/29/24</th>
                            <td>Brockerage</td>
                            <td>Monthly Contribution</td>
                            <td>$250.00</td>
                        </tr>

                    </tbody>
                </table>
                <button type="button" class="btn btn-primary card-link" @onclick='() => NavigateToAccountAndActivityPage(userAccounts[0].AccountName, true)'>View More</button>
            </div>

        </div> <!-- Account Activity card-->

        <div class="card" style="width: 39rem;">
            <div class="card-body">
                <h5 class="card-title">Stocks</h5>
                <h1>IBM</h1>
                <Client.Components.DailyStockDataGraph DailyStockData="dailyStockData" />
                <NavLink href="stocks">
                    <button type="button" class="btn btn-primary card-link">View Stocks and Market Activity</button>
                </NavLink>
            </div>
        </div>

        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">My Financial Advisor</h5>
                <img src=@userAccounts[0].FinancialAdvisorInfo[1] width="100" height="100"/>
                <h4>@userAccounts[0].FinancialAdvisorInfo[0]</h4>
                <h6><b>Phone:</b> @userAccounts[0].FinancialAdvisorInfo[2]</h6>
                <h6><b>Email:</b> @userAccounts[0].FinancialAdvisorInfo[3]</h6>
                <button type="button" class="btn btn-primary card-link" @onclick="OnShowModalClick">Send a Message</button>
            </div>
        </div>

    </div>
    
}

<!-- For the send message modal-->
<Modal @ref="modal" Title="Send a Message">
    <BodyTemplate>
        <h4>Subject:</h4>
        <input class="form-control" type="text" @bind-value="messageSubject" @bind-value:event="oninput">
        <br />
        <h4>Message Body:</h4>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="8" @bind="messageContent"></textarea>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="SendMessage">Send Message</Button>
    </FooterTemplate>
</Modal>

<!-- Alert for if the user tries to send a message without a subject-->
<ConfirmDialog @ref="sendMessageDialog"/>

<ConfirmDialog @ref="messageSentDialog"/>



@code {

    private AccountInformation[]? userAccounts;

    private string stockDataInfo;

    public List<StockData> stockDataList = new List<StockData>();

    string apiKey = "KRY4J4J7NUX3OZG8";
    string urlForDailyStockData;

    private DailyStockData? dailyStockData;


    private Modal modal = default!;
    private string messageSubject = "";
    private string messageContent = "";
    private ConfirmDialog sendMessageDialog = default!;
    private ConfirmDialog messageSentDialog = default!;

    protected override async Task OnInitializedAsync()
    {
        userAccounts = await Http.GetFromJsonAsync<AccountInformation[]>("sample-data/accountMockData.json").ContinueWith(task => userAccounts = task.Result);


        using (HttpClient http = new HttpClient())
        {

            //urlForDailyStockData = $"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={StockTicker}&apikey={apiKey}";
            urlForDailyStockData = $"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo";
            HttpResponseMessage response = await http.GetAsync(urlForDailyStockData);

            // Ensure the response was successful
            response.EnsureSuccessStatusCode();

            // Read the content of the response as a string
            string responseBody = await response.Content.ReadAsStringAsync();

            // Print the JSON data
            //Console.WriteLine(responseBody);

            dailyStockData = JsonConvert.DeserializeObject<DailyStockData>(responseBody);

            //Console.WriteLine(Double.Parse(dailyStockData.TimeSeriesDaily["2024-03-15"].High));



        }



    }

    //Censor the first 3 digits in the account number.
    public string CensorAccountNoDigits(long accountNumber)
    {
        string numToString = accountNumber.ToString();
        StringBuilder sb = new StringBuilder(numToString);

        for (int i = 0; i < sb.Length; i++)
        {
            if (i <= 2)
            {
                sb[i] = '*';
            }
        }

        return sb.ToString();
    }




    public double GetTotalInvestedAmount(AccountInformation userAccount)
    {
        double total = 0;

        foreach(Accounts account in userAccount.Accounts)
        {
            total += account.AccountAmount;
        }

        return total;

    }

    public void NavigateToAccountAndActivityPage(string accountName, bool showActivity)
    {
        navigationManager.NavigateTo("/accounts/" + accountName + "/" + showActivity);
    }






    public async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    public async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    private async void SendMessage()
    {
        if(messageSubject == "")
        {
            await ShowConfirmationAsync();
        }
        else
        {
            await ShowMessageSentAsync();
        }

       

    }

    private async Task ShowMessageSentAsync()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText= "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "",
            };

        var confirmation = await sendMessageDialog.ShowAsync(
            title: "Message sent",
            message1: "Message has been successfully sent!",
            confirmDialogOptions: options);
    }

    private async Task ShowConfirmationAsync()
    {
        var confirmation = await sendMessageDialog.ShowAsync(
            title: "Message has no subject",
            message1: "Are you sure you still want to send the message?");
    }



}
